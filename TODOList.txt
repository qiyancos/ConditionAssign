待完成：
    添加函数支持复杂的Group特征提取以及处理
    支持道路复杂分级匹配函数，可以先按照简单函数配置
    区域包含基于面积大小确定
    支持匹配项tag内容作为赋值源数据
    支持映射类型的MapGroup类型和查找

说明
    目前的逻辑，如果输入层和输出层不同，且输出层已存在，那么赋值操作会在和满足条件的元素索引相同的目标层元素生效
    如果没有使用到一个class的详细内容，不要include对应的头文件，只添加前置声明

已完成
    添加多线程处理过程匹配信息的Log(已完成)
    支持模块内容(这部分内容应该由BaseMapEngine完成)
    支持x/y和查找与赋值操作(兼容需要, 已完成)
    添加正常运行的信息输出(由于现在的高度并行化，可能会导致输出混乱，除非设置一个日志管理线程，单独管理日志，各个线程统一打印信息到队列, 日志线程逐个处理，但是必要性较小，故取消)
    自定义函数的评分需要由对应函数绑定(由于删除了评分系统，已取消)
    内存优化(外挂表如果不用于构建dynamic Group，在buildGroup后可以关闭, 暂时取消)
    速度优化(需要精简部分结构)(已优化)
    添加RTree支持进行地理位置运算的加速(已完成)
    优化MifItem内部的Cache信息(已完成)
    dynamic group将会被缓存在MifItem中，避免重新构建(已完成)
    复杂运算的结果将会被缓存，可以被重新利用(已完成)
    精简Group的地理位置计算逻辑(已完成)
    内存优化(搜索可以共享的资源, 输入层输出层相同的话，只打开输出层, 已完成)
    添加函数InRangeDec/InRangeHex，判断数据是否在给定的数值范围中(已完成，暂不处理Hex)
    支持多Input+多Conf并行以及单Input多Conf串行(兼容需要, 已完成)
    由于原本条件间存在先后顺序问题，删除评分系统(兼容需要，保留功能，但不调用, 已完成)
    MifItem不再自动生成，每次处理单独生成(已完成)
    支持解析时MifLayer新字段添加(已完成), 删除MifItem和内锁(兼容需要，确认无法删除)
    支持ConfigSubGroup的ConfigItem有序化，添加line信息用于精准报错(已完成)
    可能存在较多的冗余debug操作，需要做检查和优化(收益较小，已取消)
    支持多mifItem的处理过程，减轻调度压力(收益较小，已取消)
    后期使用异常代替返回值检查某些非fast错误(收益较小，已取消)
    检查是否存在可能的工作项有依赖但是没有加wait操作(已完成)
    死锁的检查(尽量避免wait并优化干扰，避免lock影响速度)(已完成)
    排查执行路线上冗余的wait操作，避免反复wait同一个变量(已完成)
    删除所有行尾空格(已完成)
    尽量避免过多的无用lock操作(已完成)
    使用lock_guard替换现有的所有锁操作(已完成)
    将一部分简单共享数据处理成原子变量(已完成)
    完成剩余的cpp文件(已完成)
    所有使用new的地方都需要进行检查，确保最后会析构(已完成)
    检查所有类的构造和析构函数是否正确(已完成)
    代码风格，所有的指针的指针一律在结尾加上后缀Ptr(已完成)
    优化任务1，优化MifLayer和MifItem，区分只读类型和写类型，避免额外的锁操作(已完成)
    优化任务2, 优化Operator，所有的Operator均实例化，公有成员则处理成静态成员(已完成)
    优化任务3，对于地理位置关系判断，All系列的关系可以转换成某个One取非，尽量进行转换(已取消)
    功能增强，添加对地理结构接触相关的符号逻辑(已完成)
    重构ExecutorJob，支持更好的扩展性，这一部分扩展的需求较小(已取消)
    添加输出层不同时的assign方法，需要新建MifItem并拷贝(已完成)
    添加输出层为空时的创建动作(已完成)
    如果输入层和输出层一致时的layer的打开动作设计，是否可以打开两次，一个只读，一个写操作(目前分开处理)
    优化任务，简化备选队列为单队列(已完成)
    调整debug宏，支持按格式输出(已完成)
    深度优化，减少逻辑表达式中不必要的表达式，比如A&&B，A不满足则A&&B对应节点直接设置为不满足，而不计算B(已完成)
    加强赋值的类型检查操作(已完成)
    inputlayer和pluginlayer统一放置，节省空间(已完成)
    支持动态重映射的Group建立(已完成)
    Group缓存的查找和插入必须原子进行，否则会出现问题(已完成)
    在lock与unlock之间会存在错误状态的return，如果错误return无法导致程序结束就会导致死锁(可以使用lock_guard解决)
